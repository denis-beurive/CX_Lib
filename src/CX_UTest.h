#ifndef SL_LIB_CX_UTEST_H
#define SL_LIB_CX_UTEST_H

#include "CX_Status.h"
#include "CX_BashColor.h"

// Please note that the functions that start with "_" should not be called directly.
// These functions should be called through a macro.

// You should not call the function below directly. Use "CX_UTestINIT_ALL()".
void _CX_UTestSetRootPath(char *inRootAbsolutePath);
// You should not call the function below directly. Use "CX_UTestINIT_ALL()".
void _CX_UTestSetCurrentRelativePath(char *inCurrentRelativePath);
// You should not call the function below directly. Use "CX_UTestFORCE_TRUE()".
char *_CX_UTestGetCurrentPath();
// You should not call the function below directly. Use "CX_UTestINIT_ALL()".
void _CX_UTestSetMCheckReportPath(char *inAbsolutePath);
// You should not call the function below directly. Use "CX_UTestINIT_FUNCTION_TEST()".
void _CX_UTestSetCurrentFunction(const char *inFunctionName);
// You should not call the function below directly. Use "CX_UTestFORCE_TRUE()".
char *_CX_UTestGetCurrentFunction();
// You should not call the function below directly. Use "CX_UTestINIT_TEST()".
const char *_CX_UTestGetMCheckReportFileAbsolutePath(const char *inFileBasename);
// You should not call the function below directly. Use "CX_UTestINIT_TEST()".
const char *_CX_UTestGetMCheckConfiguration(const char *inFileBasename);
// You should not call the function below directly. Use "CX_UTestFORCE_TRUE()".
bool _CX_UTestIsCurrentTest(char *inRelativeFilePath, char *inFunctionName, int inTestId);

void CX_UTestSetTestID(int inTestId);

/**
 * @brief Initialise UTest for a given C source file that is being tested.
 * The first argument represents the absolute path to the project root directory.
 * The second argument represents the relative path (relatively to the project root directory) to the project C source
 * file being tested.
 * The third argument represents the absolute path to the directory used to store the reports generated by MCheck.
 * @note This macro should be called **(only) once** within the C Source file that implements the unit tests.
 * @example _CX_UTestINIT_ALL("/home/denis/Desktop/CX_Lib", "src/CX_Logger.c", "/home/denis/Desktop/CX_Lib/../reports")
 * The C source file being tested is "/home/denis/Desktop/CX_Lib/src/CX_Logger.c".
 */

#define CX_UTestINIT_ALL(x, y, z) _CX_UTestSetRootPath(x); \
    _CX_UTestSetCurrentRelativePath(y); \
    _CX_UTestSetMCheckReportPath(z)

/**
 * @brief Initialise UTest for a a given function that is being tested.
 * The argument represents the name of the function that is being tested.
 * @note Please note that this macro should be called within the project C
 * source file that is currently being tested.
 * @example _CX_UTestINIT_TEST("CX_LoggerLog")
 * The function being unit tested is "CX_LoggerLog".
 */

#define CX_UTestINIT_FUNCTION_TEST _CX_UTestSetCurrentFunction(__FUNCTION__)

/**
 * @brief Initialise a unit test.
 * @note This macro should be called once at the beginning of each function that implements a unit test.
 */

#define CX_UTestINIT_TEST putenv(_CX_UTestGetMCheckConfiguration(__FUNCTION__)); \
    printf("%s", CX_BashColorFB(F_LIGHT_YELLOW, B_DEFAULT)); \
    printf("Exec %s\n", __FUNCTION__); fflush(stdout); \
    CX_BashColorReset()

/**
 * @brief End a unit tests suite.
 * @note This macro should be called once at the end of the file that implements a list of unit tests (for a given
 * project C source file).
 */

#define CX_UTestEND_TEST_SUITE  int rc = CU_get_error(); \
            if (0 != rc) { \
                CX_BashColorPrintf( \
                F_BLACK, \
                B_LIGHT_RED, \
                "\n\n", \
                "\n\n", \
                "######## ERROR ########"); \
            } else { \
                CX_BashColorPrintf( \
                F_BLACK, \
                B_LIGHT_GREEN, \
                "\n\n", \
                "\n\n", \
                "######## SUCCESS ########"); \
            } \
            return rc

/**
 * @brief This macro is used to force the evaluation of a test to true, within a function that should be unit tested.
 * The argument represents the (relative) ID of the test.
 * The ID is relative to:
 * - the relative path of the project C source file that is being tested.
 * - the name of the function (within the project C source file) that is being tested.
 * @example if (<a condition> CX_UTestFORCE_TRUE(10)) { ... }
 * @note Please note that this macro should be called within the project C source file that is being tested.
 */

#define CX_UTestFORCE_TRUE(id) || _CX_UTestIsCurrentTest(_CX_UTestGetCurrentPath(), _CX_UTestGetCurrentFunction(), id)

#endif //SL_LIB_CX_UTEST_H
